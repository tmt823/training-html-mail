name: Release new version

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Build and configure package(s)
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.node-version'
      - name: Build packages
        run: |
          npm ci
          npm run release
          zip -r release.zip ./release
      - uses: actions/upload-artifact@v3
        with:
          name: release-packages
          path: release.zip
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Check stage from tag
        id: parse-tag
        run: |
          echo "is-core-release=$(echo ${{ github.ref_name }} | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$'|wc -l)" >> $GITHUB_OUTPUT
    outputs:
      is-prerelease: ${{ steps.parse-tag.outputs.is-core-release != '1' }}
      is-release: ${{ steps.parse-tag.outputs.is-core-release == '1' }}
  github-releases:
    runs-on: ubuntu-latest
    needs:
      - build
      - prepare
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: release-packages
      - name: Create release on GitHub
        id: create-release
        uses: actions/create-release@latest
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is-prerelease }}
      - name: Get release zip name
        run: |
          echo "release-zip-name=${{ github.ref_name }}_${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}.zip" >> $GITHUB_ENV
      - name: Upload dist to GitHub
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: ${{ env.release-zip-name }}
          asset_content_type: application/zip
